package com.brnozgn.demo.business.concretes;

import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.brnozgn.demo.business.abstracts.BookService;
import com.brnozgn.demo.business.constants.Messages;
import com.brnozgn.demo.business.dto.requests.create.CreateBookRequest;
import com.brnozgn.demo.business.dto.requests.update.UpdateBookRequest;
import com.brnozgn.demo.business.dto.responses.create.CreateBookResponse;
import com.brnozgn.demo.business.dto.responses.update.UpdateBookResponse;
import com.brnozgn.demo.dataAccess.BookRepository;
import com.brnozgn.demo.entities.Book;
import com.brnozgn.demo.utilities.results.DataResult;
import com.brnozgn.demo.utilities.results.SuccessDataResult;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class BookManager implements BookService {

	private BookRepository repository;
	private ModelMapper modelMapper;

	@Override
	public DataResult<CreateBookResponse> add(CreateBookRequest bookRequest) {
		Book book = this.modelMapper.map(bookRequest, Book.class);
		book.setId(UUID.randomUUID().toString());
		this.repository.save(book);
		CreateBookResponse response = this.modelMapper.map(book, CreateBookResponse.class);
		return new SuccessDataResult<CreateBookResponse>(response, Messages.AddBook);
	}


	public DataResult<UpdateBookResponse> update(UpdateBookRequest request) {
		Book book = this.modelMapper.map(request, Book.class);
		this.repository.save(book);
		UpdateBookResponse response=this.modelMapper.map(book, UpdateBookResponse.class);
		return new SuccessDataResult<UpdateBookResponse>(response, Messages.UpdatedBook);
	}

}
