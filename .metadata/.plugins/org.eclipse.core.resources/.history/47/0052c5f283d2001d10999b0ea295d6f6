package com.brnozgn.demo.business.concretes;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.brnozgn.demo.business.abstracts.BookService;
import com.brnozgn.demo.business.constants.Messages;
import com.brnozgn.demo.business.dto.requests.create.CreateBookRequest;
import com.brnozgn.demo.business.dto.requests.update.UpdateBookRequest;
import com.brnozgn.demo.business.dto.responses.create.CreateBookResponse;
import com.brnozgn.demo.business.dto.responses.get.getAll.GetAllBookResponse;
import com.brnozgn.demo.business.dto.responses.update.UpdateBookResponse;
import com.brnozgn.demo.dataAccess.BookRepository;
import com.brnozgn.demo.entities.Book;
import com.brnozgn.demo.utilities.mapping.ModelMapperService;
import com.brnozgn.demo.utilities.results.DataResult;
import com.brnozgn.demo.utilities.results.Result;
import com.brnozgn.demo.utilities.results.SuccessDataResult;
import com.brnozgn.demo.utilities.results.SuccessResult;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
@Service
public class BookManager implements BookService {

	private BookRepository bookRepository;
	private ModelMapperService modelMapperService;

	@Override
	public DataResult<CreateBookResponse> addBook(CreateBookRequest createBookRequest) {
		Book book = this.modelMapperService.forRequest().map(createBookRequest, Book.class);
		book.setId(UUID.randomUUID().toString());

		this.bookRepository.save(book);

		CreateBookResponse createBookResponse = this.modelMapperService.forResponse().map(book,
				CreateBookResponse.class);
		return new SuccessDataResult<CreateBookResponse>(createBookResponse, Messages.AddBook);
	}

	@Override
	public DataResult<UpdateBookResponse> updateBook(UpdateBookRequest updateBookRequest) {
		Book book = this.modelMapperService.forRequest().map(updateBookRequest, Book.class);
		this.bookRepository.save(book);

		UpdateBookResponse updateBookResponse = this.modelMapperService.forResponse().map(book,
				UpdateBookResponse.class);

		return new SuccessDataResult<UpdateBookResponse>(updateBookResponse, Messages.UpdatedBook);
	}

	@Override
	public Result deleteBook(String id) {
		this.bookRepository.deleteById(id);
		return new SuccessResult(Messages.DeletedBook);

	}

	@Override
	public DataResult<List<GetAllBookResponse>> getAll() {
		List<Book> books = this.bookRepository.findAll();
		List<GetAllBookResponse> getAll = books.stream()
				.map(book -> this.modelMapperService.forResponse().map(book, GetAllBookResponse.class))
				.collect(Collectors.toList());
		return new SuccessDataResult<List<GetAllBookResponse>>(getAll, Messages.ListedBook);
	}

}
